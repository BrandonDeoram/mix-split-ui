// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  googleAccountId     String?      @unique
  spotifyAccountId    String?      @unique
  spotifyAccessToken  String?
  spotifyRefreshToken String?      @db.VarChar(500)
  accessTokenExpires  DateTime?
  files               FileUpload[] @relation("UserFiles")
  playlists           Playlist[]   @relation("UserPlaylists")
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model FileUpload {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation("UserFiles", fields: [userId], references: [id])
  fileKey   String       @unique // S3 object key
  fileSize  Int
  status    UploadStatus
  songs     Song[]       @relation("FileSongs")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([userId])
}

model Song {
  id         String     @id @default(cuid())
  fileId     String
  file       FileUpload @relation("FileSongs", fields: [fileId], references: [id])
  title      String
  artist     String
  album      String?
  duration   Int // in seconds
  isrc       String?    @unique
  spotifyUri String?    @unique // Spotify track URI
  createdAt  DateTime   @default(now())

  @@index([fileId, isrc, spotifyUri])
}

model Playlist {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation("UserPlaylists", fields: [userId], references: [id])
  name       String
  spotifyUrl String   @unique
  songCount  Int
  createdAt  DateTime @default(now())
}

enum UploadStatus {
  PENDING
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}
